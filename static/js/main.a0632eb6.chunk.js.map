{"version":3,"sources":["components/Card/null.png","components/Card/rock.png","components/Card/paper.png","components/Card/scissors.png","components/Score/Score.js","components/Card/Card.js","pages/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Score","result1","result2","result3","className","Card","choice","player","weapon","waiting","rock","paper","scissors","src","alt","Game","useState","turn","setTurn","win","setWin","lose","setLose","draw","setDraw","player1","setPlayer1","player2","setPlayer2","winner","setWinner","r1","setR1","r2","setR2","r3","setR3","end","setEnd","useEffect","selectWinner","temp1","temp2","temp3","sum","prev","selectWeapon","onClick","count","time","setInterval","Math","floor","random","clearInterval","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a0632eb6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/null.1ecdbcf2.png\";","module.exports = __webpack_public_path__ + \"static/media/rock.57550028.png\";","module.exports = __webpack_public_path__ + \"static/media/paper.6eff53a9.png\";","module.exports = __webpack_public_path__ + \"static/media/scissors.ce680009.png\";","import React from \"react\";\nimport \"./Score.css\";\nexport const Score = ({ result1, result2, result3 }) => {\n  return (\n    <div className=\"circle-arrangement\">\n      <div className={result1}></div>\n      <div className={result2}></div>\n      <div className={result3}></div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Card.css\";\nimport rock from \"./rock.png\";\nimport paper from \"./paper.png\";\nimport scissors from \"./scissors.png\";\nimport waiting from \"./null.png\";\nexport const Card = ({ choice, player }) => {\n  let weapon = waiting;\n\n  if (choice === 0) weapon = rock;\n  else if (choice === 1) weapon = paper;\n  else if (choice === 2) weapon = scissors;\n  else weapon = waiting;\n\n  return (\n    <div>\n      <img src={weapon} className={player} alt=\"choice\" />\n    </div>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport \"./Game.css\";\nimport { Score } from \"../../components/Score/Score\";\nimport { Card } from \"../../components/Card/Card\";\n\nexport const Game = () => {\n  const [turn, setTurn] = useState(0);\n  const [win, setWin] = useState(0);\n  const [lose, setLose] = useState(0);\n  const [draw, setDraw] = useState(0);\n\n  const [player1, setPlayer1] = useState(null);\n  const [player2, setPlayer2] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [r1, setR1] = useState(\"nCircle\");\n  const [r2, setR2] = useState(\"nCircle\");\n  const [r3, setR3] = useState(\"nCircle\");\n  const [end, setEnd] = useState(true);\n\n  useEffect(() => {\n    if (player2 != null && end) {\n      //console.log(player2, end, turn);\n      if (turn === 1) {\n        if (selectWinner() === \"Player1 is the winner\") {\n          setR1(\"win\");\n        } else if (selectWinner() === \"Wow!! It's Draw\") {\n          setR1(\"draw\");\n        } else {\n          setR1(\"lose\");\n        }\n      } else if (turn === 2) {\n        if (selectWinner() === \"Player1 is the winner\") {\n          setR2(\"win\");\n        } else if (selectWinner() === \"Wow!! It's Draw\") {\n          setR2(\"draw\");\n        } else {\n          setR2(\"lose\");\n        }\n      } else if (turn === 3) {\n        if (selectWinner() === \"Player1 is the winner\") {\n          setR3(\"win\");\n        } else if (selectWinner() === \"Wow!! It's Draw\") {\n          setR3(\"draw\");\n        } else {\n          setR3(\"lose\");\n        }\n      }\n    }\n  }, [player2, end, turn]);\n\n  useEffect(() => {\n    if (turn === 3 && r3 != \"nCircle\") {\n      let temp1 = 0;\n      let temp2 = 0;\n      let temp3 = 0;\n\n      if (r1 === \"win\") temp1 = 1;\n      else if (r1 === \"lose\") temp1 = -1;\n\n      if (r2 === \"win\") temp2 = 1;\n      else if (r2 === \"lose\") temp2 = -1;\n\n      if (r3 === \"win\") temp3 = 1;\n      else if (r3 === \"lose\") temp3 = -1;\n\n      let sum = temp1 + temp2 + temp3;\n\n      if (sum > 0) {\n        setWin((prev) => prev + 1);\n      } else if (sum === 0) {\n        setDraw((prev) => prev + 1);\n      } else {\n        setLose((prev) => prev + 1);\n      }\n    }\n  }, [turn, r3]);\n\n  const randomP2 = () => {\n    var count = 0;\n    setPlayer2(null);\n    setWinner(null);\n    setEnd(false);\n    if (turn >= 3) {\n      setTurn((prev) => 0);\n      setR1(\"nCircle\");\n      setR2(\"nCircle\");\n      setR3(\"nCircle\");\n    }\n    if (player1 !== null) {\n      let time = setInterval(() => {\n        setPlayer2(Math.floor(Math.random() * 3));\n        count++;\n        if (count > 5) {\n          setWinner(selectWinner());\n          setTurn((prev) => prev + 1);\n          setEnd(true);\n          clearInterval(time);\n        }\n      }, 300);\n    }\n  };\n\n  const selectWinner = () => {\n    if (\n      (player1 === 0 && player2 === 2) ||\n      (player1 === 1 && player2 === 0) ||\n      (player1 === 2 && player2 === 1)\n    ) {\n      return \"Player1 is the winner\";\n    } else if (player1 === player2) {\n      return \"Wow!! It's Draw\";\n    } else {\n      return \"Player2 is the winner\";\n    }\n  };\n\n  const selectWeapon = (weapon) => {\n    setPlayer1(weapon);\n    setPlayer2(null);\n    setWinner(null);\n  };\n\n  return (\n    <div>\n      <div>\n        <h1>{winner ? selectWinner() : \"Waiting For Result\"}</h1>\n      </div>\n      <Score result1={r1} result2={r2} result3={r3} />\n      <div className=\"result-template\">\n        <div className=\"round-result\">\n          <h2>Round Result</h2>\n          <h2>\n            Win : {win} | Draw : {draw} | Lose : {lose}\n          </h2>\n        </div>\n      </div>\n\n      <div className=\"card-arrangement\">\n        <Card choice={player1} player=\"p1\" />\n        <button className=\"fight-btn\" onClick={randomP2}>\n          Fight\n        </button>\n        <Card choice={player2} player=\"p2\" />\n      </div>\n      <h1>Choose Your Hand</h1>\n      <div className=\"select-choice\">\n        <button onClick={() => selectWeapon(0)}>Rock</button>\n        <button onClick={() => selectWeapon(1)}>Paper</button>\n        <button onClick={() => selectWeapon(2)}>Scissors</button>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { Game } from \"./pages/Game/Game.js\";\nimport { Menu } from \"./pages/Menu/Menu.js\";\n\nfunction App() {\n  return (\n    <div>\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}